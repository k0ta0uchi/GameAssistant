from typing import Any, Optional, Callable, Coroutine, Awaitable, List, Protocol
from twitchio.message import ChatMessage, Channel, User

class Context(Protocol):
    """commands.Context の必要最小限の抽象"""
    author: User
    message: ChatMessage
    channel: Channel

    async def send(self, msg: str, *args: Any, **kwargs: Any) -> None: ...
    async def reply(self, msg: str, *args: Any, **kwargs: Any) -> None: ...

def command(*, name: Optional[str] = ..., aliases: Optional[List[str]] = ...) -> Callable[[Callable[..., Any]], Any]: ...
def group(*, invoke_fallback: bool = ...) -> Callable[[Callable[..., Any]], Any]: ...

class Component:
    def __init__(self, bot: "AutoBot") -> None: ...
    @staticmethod
    def listener() -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
    # allow defining commands inside component
    def command(self, *args: Any, **kwargs: Any) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...

class AutoBot:
    """
    v3 AutoBot の最小シグネチャと主要属性（v3.1.0 想定）
    """
    client_id: str
    client_secret: str
    bot_id: str
    owner_id: Optional[str]
    prefix: str

    conduits: List[Any]  # will be Conduit instances at runtime

    def __init__(self, *, client_id: str, client_secret: str, bot_id: str, owner_id: Optional[str] = None, prefix: str = "!") -> None: ...
    async def setup_hook(self) -> None: ...
    async def event_ready(self) -> None: ...
    async def start(self, *, load_tokens: bool = True) -> None: ...
    async def add_token(self, token: str, refresh: str) -> Any: ...
    async def handle_commands(self, message: ChatMessage) -> None: ...
    # other convenience methods
    user: Any
    async def join_channels(self, channels: List[str] | str) -> None: ...
    async def fetch_users(self, *, ids: Optional[List[int | str]] = None, logins: Optional[List[str]] = None) -> List[Any]: ...
    def create_partial_user(self, *, id: int, name: str) -> Any: ...


class Bot:
    """
    v3 Bot の最小シグネチャ
    """
    def __init__(
        self, 
        *, 
        token: str, 
        client_id: str, 
        client_secret: str, 
        prefix: str = "!", 
        initial_channels: Optional[List[str]] = None
    ) -> None: ...
    async def start(self) -> None: ...
    async def fetch_users(self, names: Optional[List[str]] = None) -> List[User]: ...
    @property
    def nick(self) -> str: ...
